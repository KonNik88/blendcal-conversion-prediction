import os
import json
from io import StringIO
from pathlib import Path

import pandas as pd
import requests
import streamlit as st

def _safe_rerun():
    # Streamlit ‚â• 1.40
    try:
        import streamlit as st
        st.rerun()
        return
    except Exception:
        pass
    # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    try:
        st.experimental_rerun()
    except Exception:
        pass

def number_or_none(col, name, initial=None, help_text=None):
    raw = col.text_input(
        name,
        value=("" if initial is None else str(initial)),
        help=help_text,
        placeholder="—á–∏—Å–ª–æ",
    ).strip().replace(",", ".")
    if raw == "":
        return None
    try:
        v = float(raw)
        return int(v) if v.is_integer() else v
    except Exception:
        st.warning(f"¬´{name}¬ª: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ¬´{raw}¬ª –≤ —á–∏—Å–ª–æ ‚Äî –æ—Å—Ç–∞–≤–ª—è—é –ø—É—Å—Ç—ã–º.")
        return None

# ---------- Paths & defaults ----------
API_DEFAULT = os.getenv("BLENDCAL_API", "http://localhost:8000")
ASSETS_DIR = Path(__file__).resolve().parent / "assets"
LOGO1 = ASSETS_DIR / "logo1.png"  # car
LOGO2 = ASSETS_DIR / "logo2.jpg"  # ML

st.set_page_config(page_title="BlendCAL ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", layout="wide")

# ---------- Light theming via CSS ----------
st.markdown(
    """
<style>
:root {
  --primary: #5B67F1;
  --bg: #FFFFFF;
  --bg2: #F6F7FF;
  --text: #1A1B22;
  --muted: #556;
}
html, body, [data-testid="stAppViewContainer"] {
  background-color: var(--bg);
}
.main .block-container { padding-top: 1rem; }
.header {
  display: flex; align-items: center; gap: 16px;
  padding: 8px 0 10px 0; border-bottom: 1px solid #eaeaea;
}
.header h1 { margin: 0; font-size: 1.6rem; }
.badge {
  background: #EEF; border: 1px solid #DDE; padding: 2px 10px; border-radius: 999px;
  font-size: 12px; color: var(--muted);
}
.smallcaps { font-variant: all-small-caps; letter-spacing: .6px; color: var(--muted); }
hr.soft { border: none; border-top: 1px solid #ececf1; margin: .6rem 0 1.0rem 0; }
.card {
  background: var(--bg2); border: 1px solid #E6E8FF; border-radius: 12px; padding: 10px 12px;
}
</style>
""",
    unsafe_allow_html=True,
)

# ---------- Header with two logos ----------
col_logo1, col_title, col_logo2 = st.columns([1, 5, 1], vertical_alignment="center")
with col_logo1:
    if LOGO1.exists():
        st.image(str(LOGO1), use_container_width=True)
with col_title:
    st.markdown(
        '<div class="header">'
        '<h1>üîÆ BlendCAL ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</h1>'
        '<span class="badge">UI over FastAPI</span>'
        "</div>",
        unsafe_allow_html=True,
    )
with col_logo2:
    if LOGO2.exists():
        st.image(str(LOGO2), use_container_width=True)

st.markdown('<hr class="soft"/>', unsafe_allow_html=True)

# ---------- Sidebar: API, threshold, model passport ----------
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    api_url = st.text_input("API URL", value=API_DEFAULT, help="–ê–¥—Ä–µ—Å FastAPI —Å–µ—Ä–≤–∏—Å–∞")
    MODE_OPTIONS = ["bestF1", "hi_recall"]
    mode = st.radio("–†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞", MODE_OPTIONS, index=0, help="–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    colA, colB = st.columns(2)
    with colA:
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API", use_container_width=True):
            try:
                ping = requests.get(f"{api_url}/health", timeout=5).json()
                st.success(ping)
            except Exception as e:
                st.error(e)
    with colB:
        refresh = st.button("–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é", use_container_width=True)

    # –ü–∞—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∏–∑ /version (—á–∏—Ç–∞–µ—Ç MODEL_INFO.json + active_models)
    model_info = {}
    try:
        model_info = requests.get(f"{api_url}/version", timeout=8).json()
    except Exception as e:
        if refresh:
            st.warning(f"–í–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

    if model_info:
        st.markdown("### –ü–∞—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏")
        v = model_info.get("version", "‚Äî")
        author = model_info.get("author", model_info.get("owner", "‚Äî"))
        date = model_info.get("date", "‚Äî")
        desc = model_info.get("description", "")
        active = model_info.get("active_models", None)  # –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ API
        st.write(f"**–í–µ—Ä—Å–∏—è:** {v}")
        st.write(f"**–ê–≤—Ç–æ—Ä:** {author}")
        st.write(f"**–î–∞—Ç–∞:** {date}")
        if active:
            st.write(f"**–ê–Ω—Å–∞–º–±–ª—å:** {', '.join(active)}")
        if desc:
            st.caption(desc)

# ---------- Helper: download CSV template from /features ----------
with st.expander("–ö–∞–∫ –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?"):
    st.markdown(
        """
- **Single**: –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è –∏/–∏–ª–∏ –≤—Å—Ç–∞–≤—å **JSON** (utm_*, device_*, geo_*, –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ).
- **Batch CSV**: –∑–∞–≥—Ä—É–∑–∏ CSV —Å ¬´—Å—ã—Ä—ã–º–∏¬ª –∫–æ–ª–æ–Ω–∫–∞–º–∏ (–∫–∞–∫ –≤ train). –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∏—à—å `proba` –∏ `y_hat`.
- –ù–µ —É–≤–µ—Ä–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤–µ –∫–æ–ª–æ–Ω–æ–∫ ‚Äî —Å–∫–∞—á–∞–π **—à–∞–±–ª–æ–Ω CSV** (—Å—Ç—Ä–æ–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫, –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö).
        """
    )
    tcol1, tcol2 = st.columns(2)
    with tcol1:
        if st.button("–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV", use_container_width=True):
            try:
                feats = requests.get(f"{api_url}/features", timeout=10).json()
                order = feats.get("feature_order", [])
                if not order:
                    st.warning("API –Ω–µ –≤–µ—Ä–Ω—É–ª feature_order.")
                else:
                    header = ",".join(order)
                    st.download_button(
                        "‚¨áÔ∏è template.csv",
                        data=(header + "\n").encode("utf-8"),
                        file_name="template.csv",
                        mime="text/csv",
                        use_container_width=True,
                    )
            except Exception as e:
                st.error(e)
    with tcol2:
        st.markdown(
            '<div class="card">'
            '<div class="smallcaps">–ü–æ–¥—Å–∫–∞–∑–∫–∞</div>'
            '–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã ‚Äî –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø–æ–ª–Ω–∏—Ç –º–µ–¥–∏–∞–Ω–∞–º–∏/0.0 –∏ –æ–±—Ä–µ–∂–µ—Ç —Ö–≤–æ—Å—Ç—ã –ø–æ –∫–≤–∞–Ω—Ç–∏–ª—è–º.'
            "</div>",
            unsafe_allow_html=True,
        )

# ---------- Tabs ----------
tab_single, tab_batch, tab_about = st.tabs(["Single", "Batch CSV", "–û–ø–∏—Å–∞–Ω–∏–µ"])

# === TAB 1: SINGLE ===
with tab_single:
    st.subheader("Single –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    st.caption("–ó–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è –Ω–∏–∂–µ –∏/–∏–ª–∏ –ø–æ–¥–º–µ—à–∞–π JSON. –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–ª–µ–π ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–∏–º–ø—É—Ç—è—Ç—Å—è.")

    # --- —Å—Ö–µ–º–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ API ---
    try:
        feats = requests.get(f"{api_url}/features", timeout=10).json()
        num_cols = feats.get("num_cols", [])
        cat_cols = feats.get("cat_cols", [])
        feature_order = feats.get("feature_order", [])
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å /features: {e}")
        num_cols, cat_cols, feature_order = [], [], []

    LABELS = {
        "utm_source": "–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_source)",
        "utm_medium": "–¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ / –º–µ–¥–∏—É–º (utm_medium)",
        "utm_campaign": "–ö–∞–º–ø–∞–Ω–∏—è (utm_campaign)",
        "traffic_group": "–ì—Ä—É–ø–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)",
        "device_category": "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        "geo_country": "–°—Ç—Ä–∞–Ω–∞",
        "geo_city": "–ì–æ—Ä–æ–¥",
        "visit_number": "‚Ññ –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "visit_hour": "–ß–∞—Å –≤–∏–∑–∏—Ç–∞ (0‚Äì23)",
        "visit_dow": "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0‚Äì6)",
        "events_in_session": "–°–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏",
        "unique_event_types": "–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π",
        "n_brands": "–°–∫–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥–æ–≤ –∑–∞–º–µ—á–µ–Ω–æ",
        "n_models": "–°–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –∑–∞–º–µ—á–µ–Ω–æ",
        "car_brand": "–ë—Ä–µ–Ω–¥ –∞–≤—Ç–æ",
        "car_model": "–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ",
        "brand_model": "–ë—Ä–µ–Ω–¥+–º–æ–¥–µ–ª—å (—Å–∫–ª–µ–π–∫–∞)",
        "is_top_brand": "–¢–æ–ø-–±—Ä–µ–Ω–¥? (0/1)",
        "has_model": "–£–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å? (0/1)",
        "is_big_city": "–ö—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ (–ú—Å–∫/–°–ü–±)? (0/1)",
        "is_organic": "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫? (0/1)",
        "is_paid": "–ü–ª–∞—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫? (0/1)",
        "is_social": "–°–æ—Ü—Å–µ—Ç–∏? (0/1)",
        "is_email": "Email? (0/1)",
        "is_push": "Push? (0/1)",
        "is_sms": "SMS? (0/1)",
        "is_perf": "Performance? (0/1)",
        "hour_sin": "sin(2œÄ¬∑hour/24)",
        "hour_cos": "cos(2œÄ¬∑hour/24)",
        "dow_sin": "sin(2œÄ¬∑dow/7)",
        "dow_cos": "cos(2œÄ¬∑dow/7)",
    }

    HELP = {
        "utm_medium": "–ö–∞–Ω–∞–ª: cpc/banner/email/organic/referral/(none)/push/sms/social‚Ä¶",
        "utm_source": "–ò—Å—Ç–æ—á–Ω–∏–∫: google/yandex/‚Ä¶ (–µ—Å–ª–∏ –µ—Å—Ç—å).",
        "traffic_group": "–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: search/banner/social/email/push/sms/referral/perf‚Ä¶",
        "device_category": "desktop / mobile / tablet.",
        "geo_country": "–°—Ç—Ä–∞–Ω–∞ (–∫–∞–∫ –≤ train).",
        "geo_city": "–ì–æ—Ä–æ–¥ (—Ä–µ–¥–∫–∏–µ ‚Äî other_city).",
        "visit_hour": "–ß–∞—Å –≤–∏–∑–∏—Ç–∞ [0‚Äì23].",
        "visit_dow": "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ [0‚Äì6], –≥–¥–µ 0 ‚Äî –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–∫–∞–∫ –≤ train).",
        "events_in_session": "–ß–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏ (‚â•0).",
        "unique_event_types": "–ß–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (‚â•0).",
        "n_brands": "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –∑–∞–º–µ—á–µ–Ω–æ (‚â•0).",
        "n_models": "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–º–µ—á–µ–Ω–æ (‚â•0).",
        "car_brand": "–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ –∏–ª–∏ other_brand.",
        "car_model": "–ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∞–≤—Ç–æ –∏–ª–∏ other_model.",
        "brand_model": "–°–∫–ª–µ–π–∫–∞ brand_model: toyota_camry / other_brand_other_model.",
        "is_top_brand": "–§–ª–∞–≥ —Ç–æ–ø-–±—Ä–µ–Ω–¥–∞ (0/1).",
        "has_model": "–£–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å? (0/1).",
        "is_big_city": "–ú–æ—Å–∫–≤–∞/–°–ü–± (–∏ –æ–±–ª.) ‚Äî 1, –∏–Ω–∞—á–µ 0.",
        "is_organic": "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫ (0/1).",
        "is_paid": "–ü–ª–∞—Ç–Ω—ã–π (0/1).",
    }

    with st.expander("üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ)"):
        rows = []
        for c in (cat_cols + num_cols):
            rows.append({
                "–ü—Ä–∏–∑–Ω–∞–∫": c,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": LABELS.get(c, c),
                "–û–ø–∏—Å–∞–Ω–∏–µ": HELP.get(c, "‚Äî"),
                "–¢–∏–ø": ("—á–∏—Å–ª–æ–≤–æ–π" if c in num_cols else "–∫–∞—Ç–µ–≥–æ—Ä–∏—è/—Ñ–ª–∞–≥")
            })
        if rows:
            df_help = pd.DataFrame(rows, columns=["–ü—Ä–∏–∑–Ω–∞–∫", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¢–∏–ø"])
            st.dataframe(df_help, use_container_width=True, hide_index=True)

    CHOICES = {
        "device_category": ["desktop", "mobile", "tablet"],
        "utm_medium": ["cpc", "banner", "email", "organic", "referral", "(none)", "push", "sms", "social"],
        "traffic_group": ["search", "banner", "social", "email", "push", "sms", "referral", "perf"],
    }
    FLAG_COLS = {c for c in cat_cols if c.startswith("is_")}

    # --- –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    def preset_high_cr():
        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π ¬´—Ç—ë–ø–ª—ã–π¬ª –ø—Ä–µ—Å–µ—Ç (–¥–∞–≤–∞–ª y_hat=1 –≤ debug)
        return {
            "utm_medium": "cpc",
            "traffic_group": "performance" if "performance" in CHOICES.get("traffic_group", []) else "perf",
            "device_category": "mobile",
            "geo_country": "Russia",
            "geo_city": "Moscow",
            "is_big_city": 1,

            "visit_hour": 14,
            "visit_dow": 2,

            "events_in_session": 80,
            "unique_event_types": 30,
            "visit_number": 20,
            "n_brands": 10,
            "n_models": 8,

            "car_brand": "other_brand",
            "car_model": "other_model",
            "brand_model": "other_brand_other_model",

            "is_top_brand": 1,
            "has_model": 1,

            "is_organic": 0,
            "is_paid": 1,
            "is_social": 0,
            "is_email": 0,
            "is_push": 1,
            "is_sms": 1,
            "is_perf": 1,
        }

    def preset_low_cr():
        return {
            "device_category": "tablet",
            "utm_medium": "social",
            "traffic_group": "social",
            "geo_country": "Russia",
            "geo_city": "other_city",
            "is_big_city": 0,
            "visit_hour": 2,
            "visit_dow": 6,
            "events_in_session": 1,
            "unique_event_types": 1,
            "visit_number": 1,
            "n_brands": 0,
            "n_models": 0,
            "car_brand": "other_brand",
            "car_model": "other_model",
            "brand_model": "other_brand_other_model",
            "is_top_brand": 0,
            "has_model": 0,
            "is_organic": 0,
            "is_paid": 1,
            "is_social": 1,
            "is_email": 0,
            "is_push": 0,
            "is_sms": 0,
            "is_perf": 0,
        }

    # --- state –∏ –ø—Ä–µ—Å–µ—Ç—ã ---
    if "form_values" not in st.session_state:
        st.session_state.form_values = {}

    col_p1, col_p2, col_p3, col_p4 = st.columns([1,1,2,2])
    with col_p1:
        if st.button("‚ö° High‚ÄëCR –ø—Ä–µ—Å–µ—Ç"):
            st.session_state.form_values = {**st.session_state.form_values, **preset_high_cr()}
            _safe_rerun()
    with col_p2:
        if st.button("üßä Low‚ÄëCR –ø—Ä–µ—Å–µ—Ç"):
            st.session_state.form_values = {**st.session_state.form_values, **preset_low_cr()}
            _safe_rerun()

    # ---- Auto‚Äëwarm: –ø–æ–¥—Ç—è–Ω—É—Ç—å top-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ /cat_top –∏ ¬´—Ä–∞–∑–æ–≥—Ä–µ—Ç—å¬ª —á–∏—Å–ª–∞
    CAT_COLS_FOR_WARM = ["utm_medium", "traffic_group", "device_category", "geo_city", "car_brand", "car_model", "brand_model"]

    def get_top(api: str, col: str, k: int = 1):
        try:
            r = requests.get(f"{api}/cat_top", params={"col": col, "k": k}, timeout=10)
            r.raise_for_status()
            data = r.json()
            top = data.get("top") or []
            return top[0] if top else None
        except Exception:
            return None

    with col_p3:
        if st.button("‚ö° Auto‚Äëwarm from /cat_top"):
            changed = 0
            for c in CAT_COLS_FOR_WARM:
                v = get_top(api_url, c, 1)
                if v is not None:
                    st.session_state.form_values[c] = v
                    changed += 1
            # —É—Å–∏–ª–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ
            warm_nums = {"events_in_session": 80, "unique_event_types": 30, "visit_number": 20, "n_brands": 10, "n_models": 8}
            st.session_state.form_values.update(warm_nums)
            st.success(f"–ü–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã top‚Äë–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({changed}) –∏ —Ç—ë–ø–ª—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
            _safe_rerun()
    with col_p4:
        auto_trig = st.checkbox("–ê–≤—Ç–æ—Å—á–∏—Ç–∞—Ç—å hour_sin/hour_cos –∏ dow_sin/dow_cos –∏–∑ hour/dow", value=True)

    # --- JSON ¬´–ø–æ–¥–º–µ—à–∞—Ç—å¬ª ---
    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–¥–º–µ—à–∞—Ç—å JSON"):
        allow_json_override = st.checkbox(
            "–†–∞–∑—Ä–µ—à–∏—Ç—å JSON –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞ (mode)", value=False
        )
        example_json = '{\n  "features": {"events_in_session": 3, "utm_source": "google"}\n}'
        extra_json = st.text_area("features JSON", value=example_json, height=140)
        up = st.file_uploader("–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON-—Ñ–∞–π–ª", type=["json"])
        extra_dict = {}
        if up is not None:
            try:
                extra_dict = json.loads(up.getvalue())
                st.success("JSON –∑–∞–≥—Ä—É–∂–µ–Ω.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        try:
            if extra_json.strip():
                extra_dict.update(json.loads(extra_json))
        except Exception as e:
            st.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π JSON: {e}")

    # --- —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Ñ–æ—Ä–º–∞ ---
    with st.form("single_form"):
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—è –Ω–∞ –±–ª–æ–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        block1 = ["utm_source", "utm_medium", "traffic_group", "device_category"]
        block2 = ["geo_country", "geo_city", "is_big_city"]
        block3 = ["visit_hour", "visit_dow", "hour_sin", "hour_cos", "dow_sin", "dow_cos"]
        block4 = ["events_in_session", "unique_event_types", "visit_number", "n_brands", "n_models"]
        block5 = ["car_brand", "car_model", "brand_model", "is_top_brand", "has_model"]
        known = set(block1 + block2 + block3 + block4 + block5)
        rest = [c for c in (cat_cols + num_cols) if c not in known]

        def put_input(col, name):
            initial = st.session_state.form_values.get(name, None)
            label = LABELS.get(name, name)
            base_help = HELP.get(name, "–ü—Ä–∏–∑–Ω–∞–∫ –∏–∑ train. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –∑–∞–∏–º–ø—É—Ç–∏—Ç—Å—è/–∑–∞–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è.")
            help_text = f"{base_help}\n\n–ö–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–∞: `{name}`"

            if name in FLAG_COLS:
                val = col.selectbox(label, [None, 0, 1],
                                    index=[None, 0, 1].index(initial) if initial in (None, 0, 1) else 0,
                                    help=help_text)
            elif name in CHOICES:
                opts = [None] + CHOICES[name]
                val = col.selectbox(label, opts,
                                    index=opts.index(initial) if initial in opts else 0,
                                    help=help_text)
            elif name in num_cols:
                val = number_or_none(col, label, initial=initial, help_text=help_text)
            else:
                val = col.text_input(label, value=initial if isinstance(initial, str) else "",
                                     help=help_text, placeholder="—Å—Ç—Ä–æ–∫–∞")
            if val == "" or val is None:
                return None
            return int(val) if (name in FLAG_COLS and val in (0, 1)) else val

        st.markdown("### –¢—Ä–∞—Ñ–∏–∫")
        c1, c2, c3, c4 = st.columns(4)
        for nm, col in zip(block1, [c1, c2, c3, c4]):
            if nm in (cat_cols + num_cols): st.session_state.form_values[nm] = put_input(col, nm)

        st.markdown("### –ì–µ–æ")
        c1, c2, c3 = st.columns(3)
        for nm, col in zip(block2, [c1, c2, c3]):
            if nm in (cat_cols + num_cols): st.session_state.form_values[nm] = put_input(col, nm)

        st.markdown("### –í—Ä–µ–º—è")
        c1, c2, c3, c4, c5, c6 = st.columns(6)
        for nm, col in zip(block3, [c1, c2, c3, c4, c5, c6]):
            if nm in (cat_cols + num_cols): st.session_state.form_values[nm] = put_input(col, nm)

        st.markdown("### –ü–æ–≤–µ–¥–µ–Ω–∏–µ")
        c1, c2, c3, c4, c5 = st.columns(5)
        for nm, col in zip(block4, [c1, c2, c3, c4, c5]):
            if nm in (cat_cols + num_cols): st.session_state.form_values[nm] = put_input(col, nm)

        st.markdown("### –ê–≤—Ç–æ")
        c1, c2, c3, c4, c5 = st.columns(5)
        for nm, col in zip(block5, [c1, c2, c3, c4, c5]):
            if nm in (cat_cols + num_cols): st.session_state.form_values[nm] = put_input(col, nm)

        if rest:
            st.markdown("### –ü—Ä–æ—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
            cols = st.columns(4)
            for i, nm in enumerate(rest):
                st.session_state.form_values[nm] = put_input(cols[i % 4], nm)

        # –°–æ–±–µ—Ä—ë–º –∏—Ç–æ–≥–æ–≤—ã–π payload fv
        fv = {k: v for k, v in st.session_state.form_values.items() if v is not None}

        # –ê–≤—Ç–æ—Å—á—ë—Ç —Å–∏–Ω—É—Å–æ–≤/–∫–æ—Å–∏–Ω—É—Å–æ–≤
        if auto_trig:
            import math
            h = fv.get("visit_hour")
            d = fv.get("visit_dow")
            if h is not None:
                fv["hour_sin"] = math.sin(2*math.pi*float(h)/24.0)
                fv["hour_cos"] = math.cos(2*math.pi*float(h)/24.0)
            if d is not None:
                fv["dow_sin"] = math.sin(2*math.pi*float(d)/7.0)
                fv["dow_cos"] = math.cos(2*math.pi*float(d)/7.0)

        # –ü–æ–¥–º–µ—à–∞–µ–º JSON
        ej = {}
        json_mode = None
        if isinstance(extra_dict, dict):
            ej = extra_dict.get("features", extra_dict)  # –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ë—Ä—Ç–∫–∞, –±–µ—Ä—ë–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            json_mode = extra_dict.get("mode")
            if allow_json_override and json_mode:
                mm = str(json_mode).replace("-", "_").lower()
                if mm in ("bestf1", "best_f1"):
                    mode = "bestF1"
                elif mm in ("hi_recall", "hi-recall"):
                    mode = "hi_recall"

        fv.update({k: v for k, v in ej.items() if v is not None})

        # --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ---
        with st.expander("‚öôÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"):
            req = feature_order or (cat_cols + num_cols)
            from_form = {k for k, v in st.session_state.form_values.items() if v is not None}
            from_json = set(extra_dict.keys()) if isinstance(extra_dict, dict) else set()
            present = set(fv.keys())
            missing = [c for c in req if c not in present]
            extra = [c for c in present if c not in req]

            st.write(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ: **{len(present)}** –∏–∑ **{len(req)}** —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
            if missing:
                st.warning("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (–±—É–¥–µ—Ç –∏–º–ø—É—Ç–∞—Ü–∏—è –≤ API): " + ", ".join(missing[:25]) + (
                    " ‚Ä¶" if len(missing) > 25 else ""))
            else:
                st.success("–í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (–∏–º–ø—É—Ç–∞—Ü–∏—è –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è).")

            if extra:
                st.info("–õ–∏—à–Ω–∏–µ –ø–æ–ª—è (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –º–æ–¥–µ–ª—å—é): " + ", ".join(extra[:25]) + (" ‚Ä¶" if len(extra) > 25 else ""))

            both = sorted(list(from_form & from_json))
            if both:
                st.caption("‚ö†Ô∏è –ü–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –≤ —Ñ–æ—Ä–º–µ, –∏ –≤ JSON. –ü–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ **JSON –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É**:")
                st.code(", ".join(both), language="text")

            wrong_numeric = [c for c in (present & set(num_cols)) if not isinstance(fv.get(c), (int, float))]
            if wrong_numeric:
                st.error("–ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: " + ", ".join(wrong_numeric[:25]) + (
                    " ‚Ä¶" if len(wrong_numeric) > 25 else ""))

        # –ö–Ω–æ–ø–∫–∏
        cL, cM, cR, cD = st.columns([1, 1, 1, 1])
        with cL:
            refresh_diag = st.form_submit_button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", use_container_width=True)
        with cM:
            submitted = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", type="primary", use_container_width=True)
        with cR:
            clear = st.form_submit_button("–û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)
            if clear:
                st.session_state.form_values = {}
                _safe_rerun()
        with cD:
            dbg_req = st.form_submit_button("üîé Debug prediction", use_container_width=True)

    # –í—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —Ñ–æ—Ä–º—ã
    if 'submitted' in locals() and submitted:
        try:
            payload = {"features": fv, "mode": mode}
            resp = requests.post(f"{api_url}/predict", json=payload, timeout=25)
            if resp.status_code != 200:
                st.error(f"{resp.status_code}: {resp.text}")
            else:
                data = resp.json()
                m1, m2, m3 = st.columns(3)
                m1.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", f"{data['proba']:.3f}")
                m2.metric("–ü–æ—Ä–æ–≥", f"{data['threshold_used']:.3f}")
                m3.metric("–ö–ª–∞—Å—Å", "1 (–∫–æ–Ω–≤–µ—Ä—Å–∏—è)" if int(data["y_hat"]) == 1 else "0")
                with st.expander("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (payload)"):
                    st.json(fv)
        except Exception as e:
            st.exception(e)

    if 'dbg_req' in locals() and dbg_req:
        try:
            payload = {"features": fv, "mode": mode}
            r = requests.post(f"{api_url}/predict_debug", json=payload, timeout=30)
            r.raise_for_status()
            dbg = r.json()
            st.write("**Threshold used:**", dbg.get("threshold_used"))
            st.write("**Blended proba:**", dbg.get("proba_blend"))
            st.write("**Class (y_hat):**", dbg.get("y_hat"))
            parts = dbg.get("parts", {})
            if parts:
                df = pd.DataFrame.from_dict(parts, orient="index")
                df.index.name = "model"
                st.dataframe(df, use_container_width=True)
        except Exception as e:
            st.error(f"Debug failed: {e}")

# === TAB 2: BATCH CSV ===
with tab_batch:
    st.subheader("Batch CSV")
    st.caption("–ó–∞–≥—Ä—É–∑–∏ CSV —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (–∫–∞–∫ –≤ train). –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∏—à—å CSV —Å proba –∏ y_hat.")
    f = st.file_uploader("CSV —Ñ–∞–π–ª", type=["csv"])
    if f is not None and st.button("–°–∫–æ—Ä–∏—Ç—å CSV", use_container_width=True):
        try:
            files = {"file": (f.name, f.getvalue(), "text/csv")}
            data = {"mode": mode}
            resp = requests.post(f"{api_url}/predict_batch", files=files, data=data, timeout=180)
            if resp.status_code != 200:
                st.error(f"{resp.status_code}: {resp.text}")
            else:
                st.success("–ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ.")
                out_name = f"{f.name.rsplit('.', 1)[0]}__scored.csv"
                st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", data=resp.content, file_name=out_name, mime="text/csv")
                try:
                    df_preview = pd.read_csv(StringIO(resp.content.decode("utf-8"))).head(50)
                    st.dataframe(df_preview, use_container_width=True, hide_index=True)
                except Exception:
                    pass
        except Exception as e:
            st.exception(e)

# === TAB 3: ABOUT ===
with tab_about:
    st.subheader("–û–ø–∏—Å–∞–Ω–∏–µ")
    st.markdown("""
**BlendCAL** ‚Äî –∞–Ω—Å–∞–º–±–ª—å CatBoost + XGBoost + LightGBM (–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏, –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ).
- –ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: **PR-AUC (AP)**; –¥–æ–ø.: ROC-AUC, F1, Top-K.
- –ü–æ—Ä–æ–≥–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã: **bestF1** (–±–∞–ª–∞–Ω—Å) –∏ **hi-recall** (–≤—ã—Å–æ–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞).
- –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥: –º–µ–¥–∏–∞–Ω–Ω—ã–µ –∏–º–ø—É—Ç—ã, –∫–≤–∞–Ω—Ç–∏–ª—å–Ω—ã–π –∫–ª–∏–ø–ø–∏–Ω–≥, frequency-encoding –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
- –°–µ—Ä–≤–∏—Å: **FastAPI** (`/predict`, `/predict_batch`, `/features`, `/version`), UI ‚Äî **Streamlit**.
""")
    with st.expander("–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ (sessions & hits)"):
        st.markdown("""
**GA Sessions (ga_sessions.pkl)**  
`session_id` ‚Äî ID –≤–∏–∑–∏—Ç–∞; `client_id` ‚Äî ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è; `visit_date` ‚Äî –¥–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞; `visit_time` ‚Äî –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞;  
`visit_number` ‚Äî –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤–∏–∑–∏—Ç–∞; `utm_source` ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫; `utm_medium` ‚Äî –º–µ–¥–∏—É–º;  
`utm_campaign` ‚Äî –∫–∞–º–ø–∞–Ω–∏—è; `utm_keyword` ‚Äî –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ; `device_category` ‚Äî —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞;  
`device_os` ‚Äî –û–°; `device_brand` ‚Äî –º–∞—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞; `device_model` ‚Äî –º–æ–¥–µ–ª—å;  
`device_screen_resolution` ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ; `device_browser` ‚Äî –±—Ä–∞—É–∑–µ—Ä; `geo_country` ‚Äî —Å—Ç—Ä–∞–Ω–∞; `geo_city` ‚Äî –≥–æ—Ä–æ–¥.

**GA Hits (ga_hits.pkl)**  
`session_id` ‚Äî ID –≤–∏–∑–∏—Ç–∞; `hit_date` ‚Äî –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è; `hit_time` ‚Äî –≤—Ä–µ–º—è; `hit_number` ‚Äî ‚Ññ —Å–æ–±—ã—Ç–∏—è;  
`hit_type` ‚Äî —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è; `hit_referer` ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è; `hit_page_path` ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞;  
`event_category` ‚Äî —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è; `event_action` ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ; `event_label` ‚Äî —Ç–µ–≥; `event_value` ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ.
""")
    st.info(
        "–ü–æ–¥ –∫–∞–ø–æ—Ç–æ–º: –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ `artifacts/`, –≤–µ—Å–∞ –∞–Ω—Å–∞–º–±–ª—è –∏ —Ä–∞–±–æ—á–∏–µ –ø–æ—Ä–æ–≥–∏ –∏–∑ `BlendCAL_*.json`. "
        "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–æ—Å—Ç–∞–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ‚Äî —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω CSV –≤–æ –≤–∫–ª–∞–¥–∫–µ –≤—ã—à–µ."
    )
